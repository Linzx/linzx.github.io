
Runtime.exec
    ProcessManager.exec
    java_lang_ProcessManager.ProcessManager_exec


### 重要逻辑

    public Process exec(String[] taintedCommand, String[] taintedEnvironment, File workingDirectory,
            boolean redirectErrorStream) throws IOException {

        String[] command = taintedCommand.clone();
        String[] environment = taintedEnvironment != null ? taintedEnvironment.clone() : null;

        FileDescriptor in = new FileDescriptor();
        FileDescriptor out = new FileDescriptor();
        FileDescriptor err = new FileDescriptor();

        String workingPath = (workingDirectory == null)
                ? null: workingDirectory.getPath();

        synchronized (processReferences) {
            //执行
            int pid = exec(command, environment, workingPath, in, out, err, redirectErrorStream);

            ProcessImpl process = new ProcessImpl(pid, in, out, err);
            ProcessReference processReference = new ProcessReference(process, referenceQueue);
            processReferences.put(pid, processReference);

            processReferences.notifyAll();

            return process;
        }
    }

### ProcessManager_exec

    static pid_t ProcessManager_exec(JNIEnv* env, jclass, jobjectArray javaCommands,
                                     jobjectArray javaEnvironment, jstring javaWorkingDirectory,
                                     jobject inDescriptor, jobject outDescriptor, jobject errDescriptor,
                                     jboolean redirectErrorStream) {

      ExecStrings commands(env, javaCommands);
      ExecStrings environment(env, javaEnvironment);

      const char* workingDirectory = NULL;
      if (javaWorkingDirectory != NULL) {
        workingDirectory = env->GetStringUTFChars(javaWorkingDirectory, NULL);
      }

      pid_t result = ExecuteProcess(env, commands.get(), environment.get(), workingDirectory,
                                    inDescriptor, outDescriptor, errDescriptor, redirectErrorStream);

      if (javaWorkingDirectory != NULL) {
        env->ReleaseStringUTFChars(javaWorkingDirectory, workingDirectory);
      }

      return result;
    }

### ExecuteProcess

    static pid_t ExecuteProcess(JNIEnv* env, char** commands, char** environment,
                                const char* workingDirectory, jobject inDescriptor,
                                jobject outDescriptor, jobject errDescriptor,
                                jboolean redirectErrorStream) {

      // Create 4 pipes: stdin, stdout, stderr, and an exec() status pipe.
      int pipes[PIPE_COUNT * 2] = { -1, -1, -1, -1, -1, -1, -1, -1 };
      for (int i = 0; i < PIPE_COUNT; i++) {
        if (pipe(pipes + i * 2) == -1) {
          jniThrowIOException(env, errno);
          ClosePipes(pipes, -1);
          return -1;
        }
      }
      int stdinIn = pipes[0];
      int stdinOut = pipes[1];
      int stdoutIn = pipes[2];
      int stdoutOut = pipes[3];
      int stderrIn = pipes[4];
      int stderrOut = pipes[5];
      int statusIn = pipes[6];
      int statusOut = pipes[7];

      //执行fork操作
      pid_t childPid = fork();
      ...

      //子进程
      if (childPid == 0) {

        dup2(stdinIn, 0);
        dup2(stdoutOut, 1);
        if (redirectErrorStream) {
          dup2(stdoutOut, 2);
        } else {
          dup2(stderrOut, 2);
        }

        ClosePipes(pipes, statusOut);

        fcntl(statusOut, F_SETFD, FD_CLOEXEC);
        CloseNonStandardFds(statusOut);

        if (workingDirectory != NULL) {
          if (chdir(workingDirectory) == -1) {
            AbortChild(statusOut);
          }
        }

        if (environment != NULL) {
          extern char** environ;
          environ = environment;
        }

        //执行了execvp命令
        execvp(commands[0], commands);
        AbortChild(statusOut);
      }

      // This is the parent process.

      close(stdinIn);
      close(stdoutOut);
      close(stderrOut);
      close(statusOut);

      // Check status pipe for an error code. If execvp(2) succeeds, the other
      // end of the pipe should automatically close, in which case, we'll read
      // nothing.
      int child_errno;
      ssize_t count = TEMP_FAILURE_RETRY(read(statusIn, &child_errno, sizeof(int)));
      close(statusIn);
      if (count > 0) {
        // chdir(2) or execvp(2) in the child failed.
        jniThrowIOException(env, child_errno);

        close(stdoutIn);
        close(stdinOut);
        close(stderrIn);

        // Reap our zombie child right away.
        int status;
        int rc = TEMP_FAILURE_RETRY(waitpid(childPid, &status, 0));
        if (rc == -1) {
          ALOGW("waitpid on failed exec failed: %s", strerror(errno));
        }

        return -1;
      }

##　问题分析

    static void CloseNonStandardFds(int status_pipe_fd) {
      const char* fd_path = "/proc/self/fd";

      // Keep track of the system properties fd so we don't close it.
      int properties_fd = -1;
      char* properties_fd_string = getenv("ANDROID_PROPERTY_WORKSPACE");
      if (properties_fd_string != NULL) {
        properties_fd = atoi(properties_fd_string);
      }

      DIR* d = opendir(fd_path);
      int dir_fd = dirfd(d);
      dirent* e;
      while ((e = readdir(d)) != NULL) {
        char* end;
        int fd = strtol(e->d_name, &end, 10);
        if (!*end) {
          if (fd > STDERR_FILENO && fd != dir_fd && fd != status_pipe_fd && fd != properties_fd) {
            close(fd);
          }
        }
      }
      closedir(d);
    }

### 有问题的调用栈

"an.providertest" sysTid=24694
  #00 pc 00000000000199c0  /system/lib64/libc.so (syscall+28)
  #01 pc 0000000000068670  /system/lib64/libc.so (_ZL33__pthread_mutex_lock_with_timeoutP24pthread_mutex_internal_tPK8timespeci.constprop.0+484)
  #02 pc 0000000000068918  /system/lib64/libc.so (pthread_mutex_lock+36)
  #03 pc 000000000004584c  /system/lib64/libc.so (dlmalloc+380)
  #04 pc 00000000000195f0  /system/lib64/libc.so (malloc+20)
  #05 pc 000000000001c998  /system/lib64/libc.so (opendir+40)
  #06 pc 0000000000066e2c  /system/lib64/libc.so (_Z17close_fds_if_needv+156)
  #07 pc 0000000000066ee4  /system/lib64/libc.so (_Z25__bionic_atfork_run_childv+12)
  #08 pc 000000000001ad30  /system/lib64/libc.so (fork+112)
  #09 pc 0000000000020b1c  /system/lib64/libjavacore.so
  #10 pc 000000007287c430  /data/dalvik-cache/arm64/system@framework@boot.oat (offset 0x249b000)
